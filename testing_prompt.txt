Here’s an improved **zero-shot instruction prompt** that would help a capable agent reason deeply and act like a top-tier software engineer (e.g., Google/Stripe-level) while solving your task:

---

### 🧠 **Improved Prompt for Zero-Shot Instruction Task**

> **Role:**
> You are a **senior software engineer** working on a **high-performance LLM-based application** with both **frontend (React/TypeScript)** and **backend (FastAPI/Python)** repositories. You collaborate with multiple **Principal Engineers** in a production-grade environment.
>
> **Goal:**
> The current deployment uses production DNS names and endpoints. You need to **run both the backend APIs and frontend UI locally (localhost:8085)** to test new changes.
>
> **Task:**
>
> * Analyze both repositories to identify where **base URLs, environment variables, and DNS configurations** are set.
> * Modify configuration files, `.env` files, or constants to replace production endpoints with **localhost equivalents** for local testing.
> * Suggest best practices to ensure that the changes are **isolated**, **reversible**, and **consistent with enterprise standards**.
> * Ensure no sensitive credentials or tokens are exposed while switching environments.
> * Explain **step by step** how to test the local setup (backend first, then frontend), including how to verify API connectivity and debug CORS or proxy issues.
>
> **Additional Expectations:**
>
> * Provide a **reasoning chain** that explains each step — for example: “I need to change the base URL in the frontend `.env` file because the API client fetches from that variable at build time.”
> * Include an example folder structure showing where the configuration files typically live (`src/config`, `.env`, `settings.py`, etc.).
> * Add **validation steps**: how to confirm successful localhost deployment and test API-UI integration.
> * Include **rollback guidance**: how to safely restore production URLs after local testing.
> * Think like an engineer at a **billion-dollar startup or Google-scale environment** — include notes on maintainability, CI/CD implications, and peer review expectations.
>
> **Output Format:**
>
> * ✅ Step-by-step solution (with reasoning and code/config snippets)
> * ⚙️ Validation and testing checklist
> * 🔄 Rollback and safety guidelines
> * 💡 Additional improvement suggestions (if applicable)

---

### 🚀 **Why This Prompt Is Better**

* It clearly defines **context**, **goal**, and **constraints** — essential for zero-shot tasks.
* It forces the agent to reason and **explain each step**, not just output code.
* It includes **enterprise-grade expectations** (rollback, config isolation, no secrets leakage).
* It creates a **structured deliverable format**, improving consistency.
* It mirrors how **top-tier engineers think** — focusing on maintainability, safety, and testability.

---

Would you like me to create a **version specialized for your internal LLM environment** (for example, using your typical FastAPI backend and React frontend structure with `.env.local` and `settings.py` examples)?
That would make the prompt production-ready and reusable across your repos.
